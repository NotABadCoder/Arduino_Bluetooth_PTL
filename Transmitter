//Transmitter
//19-08-2023
//Author-Varun
// #include <LiquidCrystal_I2C.h>
// #include <LiquidCrystal_I2C.h>

#define BIT_LOW 1000
#define BIT_ZERO 1000
#define BIT_ONE 3000
#define BIT_RESET 5000
#define TOLERANCE 0.25

#define INPUT_PIN 2
#define OUTPUT_PIN 13
// LiquidCrystal_I2C lcd(0x27,16,2);  // set the LCD address to 0x3F for a 16 chars and 2 line display

int BIT_RESET_LL=BIT_RESET-TOLERANCE*BIT_RESET;
int BIT_RESET_UL=BIT_RESET+TOLERANCE*BIT_RESET;
int BIT_ZERO_LL=BIT_ZERO-TOLERANCE*BIT_ZERO;
int BIT_ZERO_UL=BIT_ZERO+TOLERANCE*BIT_ZERO;
int BIT_ONE_LL=BIT_ONE-TOLERANCE*BIT_ONE;
int BIT_ONE_UL=BIT_ONE+TOLERANCE*BIT_ONE;

// LiquidCrystal_I2C lcd(0x27,16,2);
const byte ROW_NUM = 4; // Four rows
// const byte COL_NUM = 4; // Four columns


void setup(){
  pinMode(OUTPUT_PIN, OUTPUT);
  Serial.begin(9600);
  pinMode(INPUT_PIN, INPUT);
  // lcd.init();
  // lcd.clear();         
  // lcd.backlight();      // Make sure backlight is on
  
  // Print a message on both lines of the LCD.
  

  // lcd.init();
  // lcd.clear();         
  // lcd.backlight();  
}
unsigned long addParityBits(unsigned int num) {
  unsigned long result = 0;

  for (int i = 0; i < 16; i += 4) {
    unsigned int nibble = (num >> i) & 0xF; // isolate each nibble
    unsigned int parity = 1; // initial value for odd parity calculation

    // calculate parity of nibble
    while (nibble) {
      parity = !parity;
      nibble = nibble & (nibble - 1);
    }

    result |= parity << (i / 4); // add parity bit to result in the reverse order
  }

  return (result << 16) | num; // prepend parity bits to original number
}
void transmit(unsigned long data){
  Serial.println(data);
  digitalWrite(OUTPUT_PIN, HIGH);
  delayMicroseconds(1000);
  digitalWrite(OUTPUT_PIN, LOW);
  delayMicroseconds(1000);
  digitalWrite(OUTPUT_PIN, HIGH);
  delayMicroseconds(5000);
  digitalWrite(OUTPUT_PIN, LOW);
  delayMicroseconds(1000);
  for(int i=19;i>=0;i--){
        if(((unsigned long)1<<i)&data){
          digitalWrite(OUTPUT_PIN, HIGH);
          delayMicroseconds(3000);
          //Serial.print('1');
        }
        else{
          digitalWrite(OUTPUT_PIN, HIGH);
          delayMicroseconds(1000);
          //Serial.print('0');
        }
        digitalWrite(OUTPUT_PIN, LOW);
        delayMicroseconds(1000);
      }
  
  digitalWrite(OUTPUT_PIN, HIGH);
  delayMicroseconds(5000);
  digitalWrite(OUTPUT_PIN, LOW);
  delayMicroseconds(1000);
}
//int lcd_index=0;
bool checkParity(unsigned long number) {
  unsigned long parityBits = (number >> 16) & 0xF; // extract the parity bits

  for (int i = 0; i < 16; i += 4) {
    unsigned int nibble = (number >> i) & 0xF; // isolate each nibble
    unsigned int calculatedParity = 1; // initial value for parity calculation

    // calculate parity of nibble
    for (int j = 0; j < 4; j++) {
      calculatedParity ^= (nibble >> j) & 0x1;
    }

    unsigned int receivedParity = (parityBits >> (i / 4)) & 0x1; // get the received parity bit

    if (receivedParity != calculatedParity) {
      return false; // parity check failed, return false
    }
  }

  return true; // parity check passed, return true
}
unsigned long pulse_Duration(){
  unsigned long startTime=micros();
  unsigned long lowDuration=0;
  unsigned long duration=0;
  while(lowDuration<250){
    while(digitalRead(INPUT_PIN)==HIGH);
    unsigned long lowStart=micros();
    while(digitalRead(INPUT_PIN)==LOW);
    unsigned long lowEnd=micros();
    lowDuration=lowEnd-lowStart;
    if(lowDuration>250){
      duration=lowStart-startTime;
    }
  }
  
  return duration;
}
void loop()
{
  //lcd.setCursor(0,0);
  //lcd.print("number: ");
  
  static unsigned int numTr=-1;
  static bool transmitting =true;
  if(transmitting){
    static String customerAddress="";
    static int customerId=-1;
    if (Serial.available()) {
      customerAddress = Serial.readStringUntil('\n');  
      static String addressSt="";
      int index1=0;
      while(customerAddress[index1]!='*'){
        addressSt+=customerAddress[index1];
        index1++;
      }
      if(customerAddress[index1]=='*'){
        unsigned int number =addressSt.toInt();
        customerId=customerAddress[index1+1]-'0';
        numTr=number;
      //lcd_index=0;
      if (number > 255 || customerId==-1 ) {
          Serial.println("Error: number too large");
          // lcd.clear();
      } else {
          // ...rest of your code
          transmitting=false;
        
          Serial.println();
          if(customerId==1){
            number|=(1<<8);
          }
          if(customerId==2){
            number|=(1<<9);
          }
          if(customerId==3){
            number|=(1<<10);
          }
          if(customerId==4){
            number|=(1<<11);
          }
          
          unsigned long number_20=addParityBits(number);
          for(int i=19;i>=0;i--){
            if(i==15 || i==11 || i==7 || i==3){
              //Serial.print(" ");
            }
            if(((unsigned long)1<<i)&number_20){
              //Serial.print('1');
            }
            else{
              //Serial.print('0');
            }
          }
          //Serial.println();
          transmit(number_20);
          delay(500);
          transmit(number_20);
          delay(500);
          transmit(number_20);
          delay(500);
          //lcd.clear();
        
        }
      
      }
      index1 = 0; // Reset the index to startÂ over
      customerAddress="";
      addressSt="";
      customerId=-1;
    }
    
    
  }
  
  else{
    //lcd.clear();
    //Serial.println("Listening Mode");
    while(digitalRead(INPUT_PIN)==LOW);
    //digitalWrite(13, LOW);
    int i=19;
    unsigned long data=0;
    unsigned long data_20=0;
    int cnt=0;
      unsigned long pulseWidth=pulse_Duration();
      //Serial.println(pulseWidth);
    if(pulseWidth>BIT_RESET_LL && pulseWidth<BIT_RESET_UL){
      
      //Serial.println("R");
      
      pulseWidth=0;
      while(pulseWidth<BIT_RESET_LL){
        if(digitalRead(INPUT_PIN)==HIGH){
          pulseWidth=pulse_Duration();
          //Serial.println(pulseWidth);
          if(pulseWidth>BIT_ONE_LL && pulseWidth<BIT_ONE_UL){
            data_20|=((unsigned long)1<<i);
            if(i<8)data|=((unsigned long)1<<i);
            
            i--;
            //Serial.println("1");
          }
          else if(pulseWidth>BIT_ZERO_LL && pulseWidth<BIT_ZERO_UL){
            //Serial.println("0");
            i--;
          }
        }
      }
      //Serial.println(data);
      if(checkParity(data_20)){
        //Serial.println("Success");
        //Serial.println(data);
        if((data==numTr)){
          // lcd.setCursor(0, 1);
          if(((unsigned long)1<<15)&data_20){
            
            Serial.println("Item Picked");
            // lcd.print("Item Picked");
          }
          if(((unsigned long)1<<14)&data_20){
            Serial.println("Bin Empty");
            // lcd.print("Bin Empty");
          }

        }
        transmitting=true;
        delay(5000);
        // lcd.clear();
      }

          
    }
    
  }
}
