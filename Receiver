//Receiver
#define Address 1
#define BIT_LOW 1000
#define BIT_ZERO 1000
#define BIT_ONE 3000
#define BIT_RESET 5000
#define TOLERANCE 0.5

#define INPUT_PIN 2
#define ITEM_PICK_ACK 3
#define BIN_EMPTY_ACK 4
#define SL_ID_0 5
#define SL_ID_1 6
#define SL_ID_2 7
#define SL_ID_3 8
#define SL_ID_4 9
#define SL_ID_5 10
#define SL_ID_6 11
#define SL_ID_7 12
#define OUTPUT_PIN 13

#define LED_1 A0
#define LED_2 A1
#define LED_3 A2
#define LED_4 A3

int BIT_RESET_LL=BIT_RESET-TOLERANCE*BIT_RESET;
int BIT_RESET_UL=BIT_RESET+TOLERANCE*BIT_RESET;
int BIT_ZERO_LL=BIT_ZERO-TOLERANCE*BIT_ZERO;
int BIT_ZERO_UL=BIT_ZERO+TOLERANCE*BIT_ZERO;
int BIT_ONE_LL=BIT_ONE-TOLERANCE*BIT_ONE;
int BIT_ONE_UL=BIT_ONE+TOLERANCE*BIT_ONE;

void setup() {
  // put your setup code here, to run once:
  pinMode(INPUT_PIN, INPUT);
  pinMode(OUTPUT_PIN, OUTPUT);
  Serial.begin(9600);
  pinMode(ITEM_PICK_ACK,OUTPUT);
  digitalWrite(ITEM_PICK_ACK,HIGH);
  pinMode(BIN_EMPTY_ACK,OUTPUT);
  digitalWrite(BIN_EMPTY_ACK,HIGH);
  pinMode(SL_ID_0,OUTPUT);
  digitalWrite(SL_ID_0,HIGH);
  pinMode(SL_ID_1,OUTPUT);
  digitalWrite(SL_ID_1,HIGH);
  pinMode(SL_ID_2,OUTPUT);
  digitalWrite(SL_ID_2,HIGH);
  pinMode(SL_ID_3,OUTPUT);
  digitalWrite(SL_ID_3,HIGH);
  pinMode(SL_ID_4,OUTPUT);
  digitalWrite(SL_ID_4,HIGH);
  pinMode(SL_ID_5,OUTPUT);
  digitalWrite(SL_ID_5,HIGH);
  pinMode(SL_ID_6,OUTPUT);
  digitalWrite(SL_ID_6,HIGH);
  pinMode(SL_ID_7,OUTPUT);
  digitalWrite(SL_ID_7,HIGH);
}
unsigned long addParityBits(unsigned int num) {
  unsigned long result = 0;

  for (int i = 0; i < 16; i += 4) {
    unsigned int nibble = (num >> i) & 0xF; // isolate each nibble
    unsigned int parity = 1; // initial value for odd parity calculation

    // calculate parity of nibble
    while (nibble) {
      parity = !parity;
      nibble = nibble & (nibble - 1);
    }

    result |= parity << (i / 4); // add parity bit to result in the reverse order
  }

  return (result << 16) | num; // prepend parity bits to original number
}
bool checkParity(unsigned long number) {
  unsigned long parityBits = (number >> 16) & 0xF; // extract the parity bits

  for (int i = 0; i < 16; i += 4) {
    unsigned int nibble = (number >> i) & 0xF; // isolate each nibble
    unsigned int calculatedParity = 1; // initial value for parity calculation

    // calculate parity of nibble
    for (int j = 0; j < 4; j++) {
      calculatedParity ^= (nibble >> j) & 0x1;
    }

    unsigned int receivedParity = (parityBits >> (i / 4)) & 0x1; // get the received parity bit

    if (receivedParity != calculatedParity) {
      return false; // parity check failed, return false
    }
  }

  return true; // parity check passed, return true
}
unsigned long pulse_Duration(){
  unsigned long startTime=micros();
  unsigned long lowDuration=0;
  unsigned long duration=0;
    while(digitalRead(INPUT_PIN)==HIGH);
    duration=micros()-startTime;
    
  
  
  return duration;
}
//bool high=false,low=false;
//bool reset=false;

int dataFinal=-1;

void transmit(unsigned long data) {
  Serial.println(data);
  digitalWrite(OUTPUT_PIN, HIGH);
  delayMicroseconds(1000);
  digitalWrite(OUTPUT_PIN, LOW);
  delayMicroseconds(1000);
  digitalWrite(OUTPUT_PIN, HIGH);
  delayMicroseconds(5000);
  digitalWrite(OUTPUT_PIN, LOW);
  delayMicroseconds(1000);

  for (int i = 19; i >= 0; i--) {
    if (((unsigned long)1 << i) & data) {
      digitalWrite(OUTPUT_PIN, HIGH);
      delayMicroseconds(3000);
    } else {
      digitalWrite(OUTPUT_PIN, HIGH);
      delayMicroseconds(1000);
    }
    digitalWrite(OUTPUT_PIN, LOW);
    delayMicroseconds(1000);
  }

  digitalWrite(OUTPUT_PIN, HIGH);
  delayMicroseconds(5000);
  digitalWrite(OUTPUT_PIN, LOW);
  delayMicroseconds(1000);
}
int get_address(){
  static int address=232;
  if(!digitalRead(SL_ID_0)){
    address|=1;
  }
  if(!digitalRead(SL_ID_1)){
    address|=(1<<1);
  }
  if(!digitalRead(SL_ID_2)){
    address|=(1<<2);
  }
  if(!digitalRead(SL_ID_3)){
    address|=(1<<3);
  }
  if(!digitalRead(SL_ID_4)){
    address|=(1<<4);
  }
  if(!digitalRead(SL_ID_5)){
    address|=(1<<5);
  }
  if(!digitalRead(SL_ID_6)){
    address|=(1<<6);
  }
  if(!digitalRead(SL_ID_7)){
    address|=(1<<7);
  }
  return address;
}
int cnt=0;
void loop() {
  // put your main code here, to run repeatedly:
  int address=get_address();
  while(digitalRead(INPUT_PIN)==LOW);
  //digitalWrite(13, LOW);
  int i=19;
  unsigned long data=0;
  unsigned long data_20=0;
  int cnt=0;
    unsigned long pulseWidth=pulse_Duration();
    //Serial.println(pulseWidth);
    int customerId=-1;
  if(pulseWidth>4000 && pulseWidth<6000){
    
    Serial.println("R");
    
    pulseWidth=0;
    while(pulseWidth<4000){
      if(digitalRead(INPUT_PIN)==HIGH){
        pulseWidth=pulse_Duration();
        //Serial.println(pulseWidth);
        if(pulseWidth>2000 && pulseWidth<4000){
          data_20|=((unsigned long)1<<i);
          if(i<8)data|=((unsigned long)1<<i);
          if(i>7 && i<16)customerId=i-7;
          i--;
          //Serial.println("1");
        }
        else if(pulseWidth>600 && pulseWidth<1500){
          //Serial.println("0");
          i--;
        }
      }
    }
  
    // Serial.println(data);
    if(checkParity(data_20)){
      Serial.println("Success");
      Serial.println(data);
      if((data==address) && address!=0){
      
        
        //unsigned long startTime=millis();
        while(customerId!=-1){
          Serial.print("Customer :");
          Serial.println(customerId);
          if((!digitalRead(ITEM_PICK_ACK))){
            data|=((unsigned long)1<<15);
            customerId=-1;
          }
          else if(!digitalRead(BIN_EMPTY_ACK)){
            data|=((unsigned long)1<<14);
            customerId=-1;
          }
          
          if(customerId==1){
            analogWrite(LED_1, 255);
            delay(500);
            analogWrite(LED_1, 0);
            delay(1000);
          }
          if(customerId==2){
            analogWrite(LED_2, 255);
            delay(500);
            analogWrite(LED_2, 0);
            delay(1000);
          }
          if(customerId==3){
            analogWrite(LED_3, 255);
            delay(500);
            analogWrite(LED_3, 0);
            delay(1000);
          }
          if(customerId==4){
            analogWrite(LED_4, 255);
            delay(500);
            analogWrite(LED_4, 0);
            delay(1000);
          }
        }
        unsigned long result=addParityBits(data);
          transmit(result);
          delay(500);
          transmit(result);
          delay(500);
          transmit(result);
          delay(500);
      }
    }
    // Serial.println(data_20);
    // Serial.println(address);
    data=0;
    i=19;
    cnt++;
  }
  Serial.println(dataFinal);
  

}
